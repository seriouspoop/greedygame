// Code generated by MockGen. DO NOT EDIT.
// Source: facade.go
//
// Generated by this command:
//
//	mockgen -source=facade.go -destination=mock_facade.go -package=svc
//

// Package svc is a generated GoMock package.
package svc

import (
	context "context"
	reflect "reflect"
	model "seriouspoop/greedygame/pkg/model"

	gomock "go.uber.org/mock/gomock"
)

// MockdbHelper is a mock of dbHelper interface.
type MockdbHelper struct {
	ctrl     *gomock.Controller
	recorder *MockdbHelperMockRecorder
}

// MockdbHelperMockRecorder is the mock recorder for MockdbHelper.
type MockdbHelperMockRecorder struct {
	mock *MockdbHelper
}

// NewMockdbHelper creates a new mock instance.
func NewMockdbHelper(ctrl *gomock.Controller) *MockdbHelper {
	mock := &MockdbHelper{ctrl: ctrl}
	mock.recorder = &MockdbHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbHelper) EXPECT() *MockdbHelperMockRecorder {
	return m.recorder
}

// GetCampaignFromCIDs mocks base method.
func (m *MockdbHelper) GetCampaignFromCIDs(ctx context.Context, campaignIDs []model.CampaignID, status model.Status) ([]*model.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignFromCIDs", ctx, campaignIDs, status)
	ret0, _ := ret[0].([]*model.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignFromCIDs indicates an expected call of GetCampaignFromCIDs.
func (mr *MockdbHelperMockRecorder) GetCampaignFromCIDs(ctx, campaignIDs, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignFromCIDs", reflect.TypeOf((*MockdbHelper)(nil).GetCampaignFromCIDs), ctx, campaignIDs, status)
}

// GetTargetingRules mocks base method.
func (m *MockdbHelper) GetTargetingRules(ctx context.Context) ([]*model.TargetingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetingRules", ctx)
	ret0, _ := ret[0].([]*model.TargetingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetingRules indicates an expected call of GetTargetingRules.
func (mr *MockdbHelperMockRecorder) GetTargetingRules(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetingRules", reflect.TypeOf((*MockdbHelper)(nil).GetTargetingRules), ctx)
}
