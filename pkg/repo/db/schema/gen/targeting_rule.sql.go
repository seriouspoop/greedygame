// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: targeting_rule.sql

package schema

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllTargetingRules = `-- name: GetAllTargetingRules :many
SELECT cid, app_include, app_exclude, country_include, country_exclude, os_include, os_exclude, created_at, updated_at FROM targeting_rule
`

func (q *Queries) GetAllTargetingRules(ctx context.Context) ([]TargetingRule, error) {
	rows, err := q.db.Query(ctx, getAllTargetingRules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TargetingRule
	for rows.Next() {
		var i TargetingRule
		if err := rows.Scan(
			&i.Cid,
			&i.AppInclude,
			&i.AppExclude,
			&i.CountryInclude,
			&i.CountryExclude,
			&i.OsInclude,
			&i.OsExclude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTargetRuleByID = `-- name: GetTargetRuleByID :one
SELECT cid, app_include, app_exclude, country_include, country_exclude, os_include, os_exclude, created_at, updated_at FROM targeting_rule
WHERE cid = $1
`

func (q *Queries) GetTargetRuleByID(ctx context.Context, cid pgtype.UUID) (TargetingRule, error) {
	row := q.db.QueryRow(ctx, getTargetRuleByID, cid)
	var i TargetingRule
	err := row.Scan(
		&i.Cid,
		&i.AppInclude,
		&i.AppExclude,
		&i.CountryInclude,
		&i.CountryExclude,
		&i.OsInclude,
		&i.OsExclude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
